/*
 * Library to access and read the storage media (SM) devices
 *
 * Copyright (c) 2008-2010, Joachim Metz <forensics@hoffmannbv.nl>,
 * Hoffmann Investigations.
 *
 * Refer to AUTHORS for acknowledgements.
 *
 * This software is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this software.  If not, see <http://www.gnu.org/licenses/>.
 */

#if !defined( _LIBSMDEV_H )
#define _LIBSMDEV_H

#include <libsmdev/codepage.h>
#include <libsmdev/definitions.h>
#include <libsmdev/error.h>
#include <libsmdev/extern.h>
#include <libsmdev/features.h>
#include <libsmdev/types.h>

#include <stdio.h>

#if defined( __cplusplus )
extern "C" {
#endif

/* -------------------------------------------------------------------------
 * Support functions
 * ------------------------------------------------------------------------- */

/* Returns the library version
 */
LIBSMDEV_EXTERN const char *libsmdev_get_version(
                             void );

/* Determines if a file is a device
 * Returns 1 if true, 0 if not or -1 on error
 */
int libsmdev_check_device(
     const char *filename,
     libsmdev_error_t **error );

#if defined( LIBSMDEV_HAVE_WIDE_CHARACTER_TYPE )
/* Determines if a file is a device
 * Returns 1 if true, 0 if not or -1 on error
 */
int libsmdev_check_device_wide(
     const char *filename,
     libsmdev_error_t **error );
#endif

/* -------------------------------------------------------------------------
 * Notify functions
 * ------------------------------------------------------------------------- */

/* Set the verbose notification
 */
LIBSMDEV_EXTERN void libsmdev_notify_set_verbose(
                      int verbose );

/* Set the notification stream
 * Returns 1 if successful or -1 on error
 */
LIBSMDEV_EXTERN int libsmdev_notify_set_stream(
                     FILE *stream,
                     libsmdev_error_t **error );

/* Opens the notification stream using a filename
 * The stream is opened in append mode
 * Returns 1 if successful or -1 on error
 */
LIBSMDEV_EXTERN int libsmdev_notify_stream_open(
                     const char *filename,
                     libsmdev_error_t **error );

/* Closes the notification stream if opened using a filename
 * Returns 0 if successful or -1 on error
 */
LIBSMDEV_EXTERN int libsmdev_notify_stream_close(
                     libsmdev_error_t **error );

/* -------------------------------------------------------------------------
 * Error functions
 * ------------------------------------------------------------------------- */

/* Frees the error including elements
 */
LIBSMDEV_EXTERN void libsmdev_error_free(
                      libsmdev_error_t **error );

/* Prints a descriptive string of the error to the stream
 * Returns the amount of printed characters if successful or -1 on error
 */
LIBSMDEV_EXTERN int libsmdev_error_fprint(
                     libsmdev_error_t *error,
                     FILE *stream );

/* Prints a descriptive string of the error to the string
 * Returns the amount of printed characters if successful or -1 on error
 */
LIBSMDEV_EXTERN int libsmdev_error_sprint(
                     libsmdev_error_t *error,
                     char *string,
                     size_t size );

/* Prints a backtrace of the error to the stream
 * Returns the amount of printed characters if successful or -1 on error
 */
LIBSMDEV_EXTERN int libsmdev_error_backtrace_fprint(
                     libsmdev_error_t *error,
                     FILE *stream );

/* Prints a backtrace of the error to the string
 * Returns the amount of printed characters if successful or -1 on error
 */
LIBSMDEV_EXTERN int libsmdev_error_backtrace_sprint(
                     libsmdev_error_t *error,
                     char *string,
                     size_t size );

/* -------------------------------------------------------------------------
 * Handle functions
 * ------------------------------------------------------------------------- */

/* Initializes the handle
 * Make sure the value handle is pointing to is set to NULL
 * Returns 1 if successful or -1 on error
 */
LIBSMDEV_EXTERN int libsmdev_handle_initialize(
                     libsmdev_handle_t **handle,
                     libsmdev_error_t **error );

/* Frees the handle
 * Returns 1 if successful or -1 on error
 */
LIBSMDEV_EXTERN int libsmdev_handle_free(
                     libsmdev_handle_t **handle,
                     libsmdev_error_t **error );

/* Signals the handle to abort its current activity
 * Returns 1 if successful or -1 on error
 */
LIBSMDEV_EXTERN int libsmdev_handle_signal_abort(
                     libsmdev_handle_t *handle,
                     libsmdev_error_t **error );

/* Opens a storage media device
 * Returns 1 if successful or -1 on error
 */
LIBSMDEV_EXTERN int libsmdev_handle_open(
                     libsmdev_handle_t *handle,
                     char * const filenames[],
                     int amount_of_filenames,
                     int flags,
                     libsmdev_error_t **error );

#if defined( LIBSMDEV_HAVE_WIDE_CHARACTER_TYPE )
/* Opens a storage media device
 * Returns 1 if successful or -1 on error
 */
LIBSMDEV_EXTERN int libsmdev_handle_open_wide(
                     libsmdev_handle_t *handle,
                     wchar_t * const filenames[],
                     int amount_of_filenames,
                     int flags,
                     libsmdev_error_t **error );
#endif

/* Closes the handle
 * Returns the 0 if succesful or -1 on error
 */
LIBSMDEV_EXTERN int libsmdev_handle_close(
                     libsmdev_handle_t *handle,
                     libsmdev_error_t **error );

/* Reads a buffer from the handle
 * Returns the amount of bytes read or -1 on error
 */
LIBSMDEV_EXTERN ssize_t libsmdev_handle_read_buffer(
                         libsmdev_handle_t *handle,
                         void *buffer,
                         size_t buffer_size,
                         libsmdev_error_t **error );

/* Writes a buffer to the handle
 * Returns the amount of bytes written or -1 on error
 */
LIBSMDEV_EXTERN ssize_t libsmdev_handle_write_buffer(
                         libsmdev_handle_t *handle,
                         void *buffer,
                         size_t buffer_size,
                         libsmdev_error_t **error );

/* Seeks an offset in the handle
 * Returns the amount of bytes in the buffer or -1 on error
 */
LIBSMDEV_EXTERN off64_t libsmdev_handle_seek_offset(
                         libsmdev_handle_t *handle,
                         off64_t offset,
                         int whence,
                         libsmdev_error_t **error );

/* Retrieves the current offset of the (media) data
 * Returns the offset if successful or -1 on error
 */
LIBSMDEV_EXTERN int libsmdev_handle_get_offset(
                     libsmdev_handle_t *handle,
                     off64_t *offset,
                     libsmdev_error_t **error );

/* Retrieves the filename size of the device
 * The filename size includes the end of string character
 * Returns 1 if successful or -1 on error
 */
LIBSMDEV_EXTERN int libsmdev_handle_get_filename_size(
                     libsmdev_handle_t *handle,
                     size_t *filename_size,
                     libsmdev_error_t **error );

/* Retrieves the filename of the device
 * The filename size should include the end of string character
 * Returns 1 if successful or -1 on error
 */
LIBSMDEV_EXTERN int libsmdev_handle_get_filename(
                     libsmdev_handle_t *handle,
                     char *filename,
                     size_t filename_size,
                     libsmdev_error_t **error );

#if defined( LIBSMDEV_HAVE_WIDE_CHARACTER_TYPE )
/* Retrieves the filename size of the device
 * The filename size includes the end of string character
 * Returns 1 if successful or -1 on error
 */
LIBSMDEV_EXTERN int libsmdev_handle_get_filename_size_wide(
                     libsmdev_handle_t *handle,
                     size_t *filename_size,
                     libsmdev_error_t **error );

/* Retrieves the filename of the device
 * The filename size should include the end of string character
 * Returns 1 if successful or -1 on error
 */
LIBSMDEV_EXTERN int libsmdev_handle_get_filename_wide(
                     libsmdev_handle_t *handle,
                     wchar_t *filename,
                     size_t filename_size,
                     libsmdev_error_t **error );
#endif

/* -------------------------------------------------------------------------
 * Meta data functions
 * ------------------------------------------------------------------------- */

/* Retrieves the media size
 * Returns the 1 if succesful or -1 on error
 */
LIBSMDEV_EXTERN int libsmdev_handle_get_media_size(
                     libsmdev_handle_t *handle,
                     size64_t *media_size,
                     libsmdev_error_t **error );

/* Retrieves the amount of bytes per sector
 * Returns the 1 if succesful or -1 on error
 */
LIBSMDEV_EXTERN int libsmdev_handle_get_bytes_per_sector(
                     libsmdev_handle_t *handle,
                     uint32_t *bytes_per_sector,
                     libsmdev_error_t **error );

#if defined( __cplusplus )
}
#endif

#endif

